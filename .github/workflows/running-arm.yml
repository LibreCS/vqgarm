
name: Running-ARM

on:
  # Triggers the workflow on push or pull request events but only for the "stable" branch
  push:
    paths:
      - 'requirements.txt'
      - 'cog.yml'
      - 'vqgan.yml'
      - 'predict.py'
      - 'generate.py'
      - '.github/workflows/running-arm.yml'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build_job:
    # The host should always be linux
    runs-on: ubuntu_latest
    name: Build on ${{ matrix.distro }} ${{ matrix.arch }}

    # Run steps on a matrix of 3 arch/distro combinations
    strategy:
      matrix:
        python: ['3.9', '3.10']
        include:
          - arch: aarch64
            distro: ubuntu_latest
          - arch: armv7
            distro: alpine_latest


    steps:
      - uses: actions/checkout@v2.1.0
      - uses: uraimo/run-on-arch-action@v2
        name: Build artifact
        id: build
        with:
          arch: ${{ matrix.arch }}
          distro: ${{ matrix.distro }}

          # Create an artifacts directory
          setup: |
            mkdir -p "${PWD}/artifacts"

          # Mount the artifacts directory as /artifacts in the container
          dockerRunArgs: |
            --volume "${PWD}/artifacts:/artifacts"

          # Pass some environment variables to the container
          env: | # YAML, but pipe character is necessary
            artifact_name: git-${{ matrix.distro }}_${{ matrix.arch }}

          # The shell to run commands with in the container
          shell: /bin/sh

          # Install some dependencies in the container. This speeds up builds if
          # you are also using githubToken. Any dependencies installed here will
          # be part of the container image that gets cached, so subsequent
          # builds don't have to re-install them. The image layer is cached
          # publicly in your project's package repository, so it is vital that
          # no secrets are present in the container state or logs.
          install: |
            case "${{ matrix.distro }}" in
              ubuntu*|jessie|stretch|buster|bullseye)
                apt-get update -q -y
                apt-get install -q -y git
                ;;
              fedora*)
                dnf -y update
                dnf -y install git which
                ;;
              alpine*)
                apk update
                apk add git
                ;;
            esac

          # Produce a binary artifact and place it in the mounted volume
          run: |
            cp $(which git) "/artifacts/${artifact_name}"
            echo "Produced artifact at /artifacts/${artifact_name}"

      - name: Show the artifact
        # Items placed in /artifacts in the container will be in
        # ${PWD}/artifacts on the host.
        run: |
          ls -al "${PWD}/artifacts"
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python }}
      - name: Install test dependencies
        run: python -m pip install -U tox
      - name: Install dependancies
        run: python -m pip install -r requirements.txt
      - name: Clone current repository
        run: git clone 'https://github.com/LibreCS/vqgarm'
      - name: Change working directory
        run: cd vqgarm
      - name: Clone CLIP from OpenAI
        run: git clone 'https://github.com/openai/CLIP'
      - name: Clone taming-transformers
        run: git clone 'https://github.com/CompVis/taming-transformers'
      - name: Make imagenet directory
        run: mkdir checkpoints
      - name: Curl imagenet yaml
        run: curl -L -o checkpoints/vqgan_imagenet_f16_16384.yaml -C - 'https://heibox.uni-heidelberg.de/d/a7530b09fed84f80a887/files/?p=%2Fconfigs%2Fmodel.yaml&dl=1'
      - name: Curl imagenet ckpt
        run: curl -L -o checkpoints/vqgan_imagenet_f16_16384.ckpt -C - 'https://heibox.uni-heidelberg.de/d/a7530b09fed84f80a887/files/?p=%2Fckpts%2Flast.ckpt&dl=1'
      - name: Running generate test
        run: python generate.py -cd cpu -i 300 -s 200 200 -p "A painting of a wizard riding a white horse into the sunset"
